@model EFCFCMSDomain.Block

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

@using (Html.BeginForm()) {
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>Block</legend>

        @Html.HiddenFor(model => model.BlockId)

        <div class="editor-label">
            @Html.LabelFor(model => model.CompanyId)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.CompanyId)
            @Html.ValidationMessageFor(model => model.CompanyId)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.DivisionId)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.DivisionId)
            @Html.ValidationMessageFor(model => model.DivisionId)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.PageId)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.PageId)
            @Html.ValidationMessageFor(model => model.PageId)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.BlockName)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.BlockName)
            @Html.ValidationMessageFor(model => model.BlockName)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.BlockContent)
        </div>
        <div class="editor-field">
             
                    @(Html.Telerik().Editor()
                                  .Name("BlockContent")
                                  .HtmlAttributes(new { style = "height:700px" })
                                  .Value("Please enter your description here")

                               // .Render()
                            )
                
            @Html.ValidationMessageFor(model => model.BlockContent)
        </div>
         <p>
        <button type="submit" class="t-button t-state-default">Post to see the generated HTML</button>
    </p>
    @{ Html.EndForm(); }
    @if (ViewData.ContainsKey("value")) { 
        <div class="editor-label">Content HTML</div>
        <pre class="prettyprint editor-output">@Html.Raw((string)ViewData["value"]) </pre>
     } 

        <div class="editor-label">
            @Html.LabelFor(model => model.HtmlUrl)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.HtmlUrl)
            @Html.ValidationMessageFor(model => model.HtmlUrl)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.CssUrl)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.CssUrl)
            @Html.ValidationMessageFor(model => model.CssUrl)
        </div>

        <p>
            <input type="submit" value="Save" />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

